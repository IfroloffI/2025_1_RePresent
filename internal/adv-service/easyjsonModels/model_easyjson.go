// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels(in *jlexer.Lexer, out *IFrame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ImageSrc":
			out.ImageSrc = string(in.String())
		case "Link":
			out.Link = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Banner":
			out.Banner = int64(in.Int64())
		case "Slot":
			out.Slot = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels(out *jwriter.Writer, in IFrame) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ImageSrc\":"
		out.RawString(prefix[1:])
		out.String(string(in.ImageSrc))
	}
	{
		const prefix string = ",\"Link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"Title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Banner\":"
		out.RawString(prefix)
		out.Int64(int64(in.Banner))
	}
	{
		const prefix string = ",\"Slot\":"
		out.RawString(prefix)
		out.String(string(in.Slot))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IFrame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IFrame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IFrame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IFrame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels(l, v)
}
func easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels1(in *jlexer.Lexer, out *GetSlotResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.Link = string(in.String())
		case "slot_name":
			out.SlotName = string(in.String())
		case "format_code":
			out.FormatCode = int(in.Int())
		case "min_price":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.MinPrice).UnmarshalText(data))
			}
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels1(out *jwriter.Writer, in GetSlotResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"slot_name\":"
		out.RawString(prefix)
		out.String(string(in.SlotName))
	}
	{
		const prefix string = ",\"format_code\":"
		out.RawString(prefix)
		out.Int(int(in.FormatCode))
	}
	{
		const prefix string = ",\"min_price\":"
		out.RawString(prefix)
		out.RawText((in.MinPrice).MarshalText())
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSlotResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSlotResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSlotResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSlotResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels1(l, v)
}
func easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels2(in *jlexer.Lexer, out *EditSlotResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.Link = string(in.String())
		case "slot_name":
			out.SlotName = string(in.String())
		case "format_code":
			out.FormatCode = int(in.Int())
		case "min_price":
			out.MinPrice = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels2(out *jwriter.Writer, in EditSlotResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"slot_name\":"
		out.RawString(prefix)
		out.String(string(in.SlotName))
	}
	{
		const prefix string = ",\"format_code\":"
		out.RawString(prefix)
		out.Int(int(in.FormatCode))
	}
	{
		const prefix string = ",\"min_price\":"
		out.RawString(prefix)
		out.String(string(in.MinPrice))
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditSlotResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditSlotResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditSlotResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditSlotResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels2(l, v)
}
func easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels3(in *jlexer.Lexer, out *CreateSlotResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "link":
			out.Link = string(in.String())
		case "slot_name":
			out.SlotName = string(in.String())
		case "format_code":
			out.FormatCode = int(in.Int())
		case "min_price":
			out.MinPrice = string(in.String())
		case "is_active":
			out.IsActive = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels3(out *jwriter.Writer, in CreateSlotResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix[1:])
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"slot_name\":"
		out.RawString(prefix)
		out.String(string(in.SlotName))
	}
	{
		const prefix string = ",\"format_code\":"
		out.RawString(prefix)
		out.Int(int(in.FormatCode))
	}
	{
		const prefix string = ",\"min_price\":"
		out.RawString(prefix)
		out.String(string(in.MinPrice))
	}
	{
		const prefix string = ",\"is_active\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsActive))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateSlotResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateSlotResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRetargetInternalAdvServiceEasyjsonModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateSlotResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateSlotResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRetargetInternalAdvServiceEasyjsonModels3(l, v)
}
